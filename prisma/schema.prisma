// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id   Int   @id @default(autoincrement())
  email String
  password String
  firstName String
  lastName String
  role Role  @default(WORKER)
}

enum Role {
  VISITOR
  WORKER
  MANAGER
}

model RestaurantMenu {
  id String @id @default(uuid())
  version Int
  items MenuItem[]
  createdAt DateTime @default(now())
}

model MenuItem {
  id Int @id @default(autoincrement())
  menuId String
  dishId Int
  restaurantMenu RestaurantMenu @relation(fields: [menuId], references: [id])
  dish Dish @relation(fields: [dishId], references: [id])
  orders OrderDetails[]
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  price Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Dish {
  id Int @id @default(autoincrement())
  title String
  description String

  items MenuItem[]
  kcal Int?
  image Bytes?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id  Int @id
  title String
  description String
  items MenuItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id String @id @default(uuid())
  orderDetaild OrderDetails[]
  status OrderStatus @default(PENDING)
  bill Bill?
  tokenId Int
  token Token @relation(fields: [tokenId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Bill {
  id String @id @default(uuid())
  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique
  createdAt DateTime
  amount Float
}

model OrderDetails {
  id Int @id @default(autoincrement())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  quantity Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  PICKED
}

model Token {
  id Int @id
  number Int
  status TokenStatus @default(AVAILABLE)
  description String
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum TokenStatus {
  AVAILABLE
  IN_USE
  IN_SERVICE
}
