generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  password  String
  role      Role   @default(WORKER)
}

model RestaurantMenu {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  version   Int
  items     MenuItem[]
}

model MenuItem {
  id             Int            @id @default(autoincrement())
  menuId         String
  dishId         Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  categoryId     Int
  price          Float          @default(0)
  category       Category       @relation(fields: [categoryId], references: [id])
  dish           Dish           @relation(fields: [dishId], references: [id])
  restaurantMenu RestaurantMenu @relation(fields: [menuId], references: [id])
  orders         OrderDetails[]
}

model Dish {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  image       String?
  kcal        Int?
  items       MenuItem[]
}

model Category {
  id          Int        @id
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  items       MenuItem[]
}

model Order {
  id           String         @id @default(uuid())
  status       OrderStatus    @default(PENDING)
  tokenId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  bill         Bill?
  token        Token          @relation(fields: [tokenId], references: [id])
  orderDetails OrderDetails[]
}

model Bill {
  id        String   @id @default(uuid())
  orderId   String   @unique
  createdAt DateTime
  amount    Float
  order     Order    @relation(fields: [orderId], references: [id])
}

model OrderDetails {
  orderId    String
  menuItemId Int
  quantity   Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  @@id([orderId, menuItemId])
}

model Token {
  id          Int         @id @default(autoincrement())
  number      Int
  status      TokenStatus @default(AVAILABLE)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  orders      Order[]
}

enum Role {
  VISITOR
  WORKER
  MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  PICKED
}

enum TokenStatus {
  AVAILABLE
  IN_USE
  IN_SERVICE
}
